#%RAML 1.0
title: Account API Spec
baseUri: https://mocksvc.mulesoft.com/mocks/8fe06722-d7af-486a-92b4-ae58903b4954 # baseUri: https://mocksvc.mulesoft.com/mocks/1b56ffc1-caa0-4d78-a3e0-47dc6a67f575 # baseUri: https://mocksvc.mulesoft.com/mocks/cf19e9bd-3ab6-40e4-862b-a18b38610a50/{version} # baseUri: http://localhost/{version}
version: v1
description: This API spec design highlights the power of RAML. It reuses existing RAML fragments for dataTypes, traits, resourceTypes and more to simplify and accelerate definig an API Spec. Fragments also ENSURE CONSISTENCY acrosss APIs. With consistency comes acclerated delivery due to developers familiarity with the design fragments. Overlays and extensions are available if needed to modify the API fragments.  \nRAML allows you to define RAML DataTypes and RAML NamedExamples instead of defining a schema and example for JSON and another for schema and example for XML and then trying to keep them in sync. With RAML DataTypes and NamedExamples you can support JSON & XML from one DataType and one NamedExample.
    
mediaType: [application/json, application/xml]
securedBy: [passthrough]
securitySchemes: 
  passthrough: !include /exchange_modules/5dfb47dc-12e3-4cac-afc5-a00be32d15d8/pass-through-security-scheme/1.0.0/pass-through-security-scheme.raml

types: 
  case.Case:
    type: account.Account


uses: 
  account: /exchange_modules/66234019-5a31-4239-ba28-4e6d70f0468a/account-library/1.0.32/account-library.raml
  collectionRT: /exchange_modules/5dfb47dc-12e3-4cac-afc5-a00be32d15d8/collection-library/1.0.20/collection-library.raml

/accounts:
  description: The collection resourceType leverages an API fragment to create the base API. You can view this fragment by expanding the exchange_modules folder. In the predefined fragment there are five methods. You'll note in the fragment they are all optional. This allows you to only use the fragments you want in this API. You can also add additional resources and methods. Annotations extend an API by adding metadata beyond that which is standardized in this RAML specification. Overlays of standard or non-standard metadata on top of an existing API definition can specify implementation details, or provide a translation of human-oriented documentation into different languages, without changing API behavior. Extending an API definition by adding to its behavior, or overriding certain aspects, is another way to satisfy different needs.
  type:  
    collectionRT.collection:
    #account.AccountCollection:
      mediaType: application/json
  get:
    description: maxResults and pagingOffset are inherited from the collection resourceType. You'll also note no dataType, examples, ... are defined for the methods in this API. This demonstrates the power of RAML. All of that is defined in the entity (ex. Account) Library and the collectionRT fragments. 
    queryParameters: 
      accountId?: 
        minLength: 3
      accountName?: 
        minLength: 3
      customerId?:
      customerName?:
        minLength: 3
      countryCode?:
        minLength: 3
        maxLength: 3
      caseId?:
      onlyPersons?:
        type: boolean

  post:

  /{id}:
    type: 
      collectionRT.member:
        mediaType: application/json
    uriParameters: 
      id:
        example: "1"
        default: "1"
    get:
    put:
    delete:         

